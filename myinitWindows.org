#+TITLE: myinit.org
#+REVEAL_THEME: league
* interface tweaks
#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(global-display-line-numbers-mode)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(setq python-shell-interpreter "/users/dboddin/Lokales/python-3.7.0-embed/python.exe"
       python-shell-interpreter-args "-i")
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* which
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

* Org-mode stuff
#+BEGIN_SRC emacs-lisp 
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(custom-set-variables
  '(org-directory "C:/Users/dboddin/Dropbox/orgfiles")
  '(org-default-notes-file (concat org-directory "/notes.org"))
;;'(org-hide-leading-stars t)
  '(org-log-into-drawer t)
  '(org-startup-folded (quote overview))
)

(setq org-file-apps
      (append '(
              ("\\.pdf\\'" . "evince %s")
	      ) org-file-apps ))

(global-set-key "\C-ca" 'org-agenda)

(use-package org-ac
       :ensure t
       :init (progn
                (require 'org-ac)
		(org-ac/config-default)
		))


(global-set-key (kbd "C-c c") 'org-capture)

(setq org-agenda-files (list "C:/Users/dboddin/Dropbox/orgfiles/gcal.org"
                                 "C:/Users/dboddin/Dropbox/orgfiles/soe-cal.org"
                                 "C:/Users/dboddin/Dropbox/orgfiles/i.org"
                                 "C:/Users/dboddin/Dropbox/orgfiles/schedule.org"))

(setq org-capture-templates
          '(("a" "Appointment" entry (file  "C:/Users/dboddin/Dropbox/orgfiles/gcal.org" )
             "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
            ("l" "Link" entry (file+headline "C:/Users/dboddin/Dropbox/orgfiles/links.org" "Links")
             "* %? %^L %^g \n%T" :prepend t)
            ("b" "Blog idea" entry (file+headline "C:/Users/dboddin/Dropbox/orgfiles/i.org" "Blog Topics:")
             "* %?\n%T" :prepend t)
            ("t" "To Do Item" entry (file+headline "C:/Users/dboddin/Dropbox/orgfiles/i.org" "To Do and Notes")
             "* TODO %?\n%u" :prepend t)
            ("m" "Mail To Do" entry (file+headline "C:/Users/dboddin/Dropbox/orgfiles/i.org" "To Do and Notes")
             "* TODO %a\n %?" :prepend t)
            ("g" "GMail To Do" entry (file+headline "C:/Users/dboddin/Dropbox/orgfiles/i.org" "To Do and Notes")
             "* TODO %^L\n %?" :prepend t)
            ("n" "Note" entry (file+headline "C:/Users/dboddin/Dropbox/orgfiles/i.org" "Notes")
             "* %u %? " :prepend t)
            ))

#+END_SRC

* searching
#+BEGIN_SRC emacs-lisp 
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

(defalias 'list-buffers 'ibuffer)

(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 2.0)))))
    ))

(use-package counsel
  :ensure t
  )

(use-package swiper
  :ensure t
  :config
  (progn
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-load-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  ))

(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

* auto complete
#+BEGIN_SRC emacs-lisp 
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC
* Themes 
and modeline
  #+BEGIN_SRC emacs-lisp 

  (use-package color-theme-modern
      :ensure t)

;    (use-package doom-themes
 ;     :ensure t)
  ;  (use-package doom-modeline
   ;   :ensure t
    ;  :hook (after-init . doom-modeline-mode))

;(require 'doom-modeline)
;(doom-modeline-init)

;(load-theme 'faff t)
;(load-theme 'faff t)

(load-theme 'desert t)
 
 #+END_SRC
  
* revealJS 
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure ox-reveal)

  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.8.0")
  (setq org-reveal-mathjax t)

  (use-package htmlize
  :ensure t)
#+END_SRC

#+RESULTS:

* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp 
(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi:ac-setup))
#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC
* Misc
  #+BEGIN_SRC  emacs-lisp
  ; flashes the cursor's line when you scroll
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  ; (setq beacon-color "#666600")
  )

  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
  :ensure t
  :config 
  (global-set-key (kbd "C-#") 'er/expand-region))

  (global-hl-line-mode t)

  (set-face-background 'hl-line "#555555")
  (use-package iedit
  :ensure t)
  
  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.
  
  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
  ((region-active-p)
  (narrow-to-region (region-beginning) (region-end)))
  ((derived-mode-p 'org-mode)
  ;; `org-edit-src-code' is not a real narrowing command.
  ;; Remove this first conditional if you don't want it.
  (cond ((ignore-errors (org-edit-src-code))
  (delete-other-windows))
  ((org-at-block-p)
  (org-narrow-to-block))
  (t (org-narrow-to-subtree))))
  (t (narrow-to-defun))))
  
  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)


#+END_SRC
* Yasnippet
Mit TAB durch snippets zum Ã¤ndern.
#+BEGIN_SRC 
(use-package yasnippet
 :ensure t
 :init
   (yas-global-mode t))

#+END_SRC
